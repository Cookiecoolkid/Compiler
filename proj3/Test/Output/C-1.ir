
FUNCTION calculateInnerLoopLimit :
PARAM totalSize_
PARAM outerLoopIndex_
temp0 := totalSize_ - outerLoopIndex_
temp1 := temp0 - #1
limitResult_ := temp1
RETURN limitResult_

FUNCTION main :
DEC sortArrayData_ 20
arrayDataSize_ := #5
outerIdx_ := #0
innerIdx_ := #0
LABEL label0 :
IF outerIdx_ < arrayDataSize_ GOTO label1
GOTO label2
LABEL label1 :
temp2 := &sortArrayData_
temp3 := outerIdx_ * #4
temp4 := temp3 + temp2
READ temp5
*temp4 := temp5
temp6 := outerIdx_ + #1
outerIdx_ := temp6
GOTO label0
LABEL label2 :
outerIdx_ := #0
temp7 := arrayDataSize_ - #1
outerLimit_ := temp7
LABEL label3 :
IF outerIdx_ < outerLimit_ GOTO label4
GOTO label5
LABEL label4 :
innerIdx_ := #0
ARG outerIdx_
ARG arrayDataSize_
temp8 := CALL calculateInnerLoopLimit
innerLimit_ := temp8
LABEL label6 :
IF innerIdx_ < innerLimit_ GOTO label7
GOTO label8
LABEL label7 :
temp9 := &sortArrayData_
temp10 := innerIdx_ * #4
temp11 := temp10 + temp9
temp12 := *temp11
temp13 := &sortArrayData_
temp14 := innerIdx_ + #1
temp15 := temp14 * #4
temp16 := temp15 + temp13
temp17 := *temp16
IF temp12 > temp17 GOTO label9
GOTO label10
LABEL label9 :
temp18 := &sortArrayData_
temp19 := innerIdx_ * #4
temp20 := temp19 + temp18
temp21 := *temp20
swapHolder_ := temp21
temp22 := &sortArrayData_
temp23 := innerIdx_ * #4
temp24 := temp23 + temp22
temp25 := &sortArrayData_
temp26 := innerIdx_ + #1
temp27 := temp26 * #4
temp28 := temp27 + temp25
temp29 := *temp28
*temp24 := temp29
temp30 := &sortArrayData_
temp31 := innerIdx_ + #1
temp32 := temp31 * #4
temp33 := temp32 + temp30
*temp33 := swapHolder_
LABEL label10 :
temp34 := innerIdx_ + #1
innerIdx_ := temp34
GOTO label6
LABEL label8 :
temp35 := outerIdx_ + #1
outerIdx_ := temp35
GOTO label3
LABEL label5 :
outerIdx_ := #0
LABEL label11 :
IF outerIdx_ < arrayDataSize_ GOTO label12
GOTO label13
LABEL label12 :
temp36 := &sortArrayData_
temp37 := outerIdx_ * #4
temp38 := temp37 + temp36
temp39 := *temp38
WRITE temp39
temp40 := outerIdx_ + #1
outerIdx_ := temp40
GOTO label11
LABEL label13 :
RETURN #0
